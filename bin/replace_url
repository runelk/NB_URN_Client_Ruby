#!/usr/bin/env ruby
$VERBOSE=nil

require_relative '../lib/nb_urn_client'
require 'optparse'
parent_folder = File.expand_path(File.join(File.dirname(__FILE__), '..'))
default_config = File.join(parent_folder, 'config', 'config.yml')

options = {}
OptionParser.new do |opts|
  opts.on("--urn URN", String, "The URN to add") do |urn|
    options[:urn] = urn
  end
  opts.on("--url-old URL", String, "The URL old to replace with a new URL") do |old_url|
    options[:old_url] = old_url
  end
  opts.on("--url-new URL", String, "The new URL") do |new_url|
    options[:new_url] = new_url
  end
  opts.on("--username USERNAME", String, "Username (if not provided by the config file)") do |username|
    options[:username] = username
  end
  opts.on("--password USERNAME", String, "Password (if not provided by the config file)") do |password|
    options[:password] = password
  end
  opts.on("--config", String, "A YAML config file") do |config|
    options[:config] = config
  end
end.parse!

if options[:urn] and options[:old_url] and options[:new_url]
  c = NbUrnClient.new(opts={
                        username: options[:username],
                        password: options[:password],
                        config_file: options[:config] ||= default_config
                      })
  puts c.replace_url(options[:urn], options[:url_old], options[:url_new]).to_s
else
  $stderr.puts "Usage: replace_url --urn URN --old-url URL --new-url URL"
end
